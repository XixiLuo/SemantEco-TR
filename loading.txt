Loads index.jsp:

if UI is avaialble then generates <script> tags...where is this done?


/Users/apseyed/Documents/rpi/SemantEco/webapp/src/main/webapp/index.jsp

SemantEco.initialize() is called which is found in:
/Users/apseyed/Documents/rpi/SemantEco/webapp/target/semanteco-webapp-4.1-SNAPSHOT/js/SemantEco.js

among other things, it is calling:
SemantEcoUI.populateFacets(); 
SemantEcoUI.initializeFacets();

also it calls: SemantEco.configureWebSockets();

note the config.js is called/loaded by index.jsp
it is handled by edu.rpi.tw.escience.semanteco.SemantEcoServlet#printConfig line 148:
    148 if(request.getServletPath().equals("/js/config.js")) {
    149                         printConfig(request, response);
    150                 }




(re-grep for config.js to see what all references this javascript file.)

on the browser config.js has:
// file autogenerated by edu.rpi.tw.escience.semanteco.SemantEcoServlet#printConfig
SemantEco.baseUrl="http://localhost:8081/semanteco/";
SemantEco.restBaseUrl="http://localhost:8081/semanteco/rest/";

here is the information I have on printConfig():
webapp/src/main/java/edu/rpi/tw/escience/semanteco/SemantEcoServlet.java


after config.js is loaded it has the necessary server variables for making requests.
when does it request the module javascript files which enable queryMethods?

servlet side is:
151                 else if(request.getServletPath().equals("/js/modules")) {
    152                         printAjax(request, response);
    153                 }o


webapp/src/main/java/edu/rpi/tw/escience/semanteco/taglib/ScriptTag.java:				out.write("js/modules/");

based on webapp/src/main/java/edu/rpi/tw/escience/semanteco/taglib/ScriptTag.java:

     48                         log.debug("Writing module autogen scripts");
     49                         List<Module> modules = ModuleManagerFactory.getInstance().getManager().listModules();
     50                         for(Module i : modules) {
     51                                 out.write("<script src=\"");
     52                                 out.write("js/modules/");
     53                                 out.write(i.getClass().getSimpleName());
     54                                 out.write(".js\" type=\"text/javascript\"></script>\r\n");
     55                         }

line 53 helps generate index.jsp content:

<script src="js/modules/AirDataProviderModule.js" type="text/javascript"></script>
<script src="js/modules/CharacteristicsModule.js" type="text/javascript"></script>
<script src="js/modules/SpeciesDataProviderModule.js" type="text/javascript"></script>
<script src="js/modules/DataSourceModule.js" type="text/javascript"></script>
<script src="js/modules/DataTypeModule.js" type="text/javascript"></script>
<script src="js/modules/Debugger.js" type="text/javascript"></script>
<script src="js/modules/DomainModule.js" type="text/javascript"></script>
<script src="js/modules/IndustryModule.js" type="text/javascript"></script>
<script src="js/modules/RegulationModule.js" type="text/javascript"></script>
<script src="js/modules/TimeModule.js" type="text/javascript"></script>
<script src="js/modules/WaterDataProviderModule.js" type="text/javascript"></script>
<script src="js/modules/ZipCodeModule.js" type="text/javascript"></script>

so clearly the TagLib for Script is to generate this list of files to source.

how is config.js requested from the server?
how do these files get request from the server?

is it the case that config.js o

when does /js/modules/*, /rest/*, and /js/modules/* become requests on the client side?

I gather that when a client sources js/config.js that is assumed to be a request to the web server that provided index.jsp that js/config.js is sourced within.

so sourcing js/config.js becomes sourcing "http://localhost:8081/semanteco/js/config.js"


populateFacets first does "$.bbq.getState();"


